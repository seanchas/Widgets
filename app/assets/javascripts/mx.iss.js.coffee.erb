##= require mx.locale

global = module?.exports ? ( exports ? this )

global.mx       ||= {}
global.mx.iss   ||= {}

$ = jQuery

scope = global.mx.iss

iss_host = "<%= Rails.application.config.iss_host %>"

cache = {}

request_meta =
    defaults:
        url: ->
            "#{iss_host}.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            _.reduce json, (memo, data, key) ->
                memo[key] = iss_merge_columns_and_data(data)
                memo
            , {}
        key: ->
            []
    
    filters:
        url: (engine, market) ->
            "#{iss_host}/engines/#{engine}/markets/#{market}/securities/columns/filters.jsonp?callback=?"
        data: (engine, market, options = {}) ->
            'iss.meta':     'off'
            'iss.only':     'filters'
            'filter_name':  options.only if options.only?
        parse: (json) ->
            iss_prepare_filters(iss_merge_columns_and_data(json?.filters))
        key: (engine, market, options = {}) ->
            [engine, market, options.only]

    columns:
        url: (engine, market) ->
            "#{iss_host}/engines/#{engine}/markets/#{market}/securities/columns.jsonp?callback=?"
        data: (engine, market, options = {}) ->
            'iss.meta': 'off'
            'iss.only': options.only || 'securities,marketdata'
        parse: (json) ->
            iss_prepare_columns(iss_merge_columns_and_data(json?.securities), iss_merge_columns_and_data(json?.marketdata))
        key: (engine, market, options = {}) ->
            [engine, market, options.only]
    
    securities:
        url: (engine, market, params, options = {}) ->
            if options.boardid?
                "#{iss_host}/engines/#{engine}/markets/#{market}/boards/#{options.boardid}/securities.jsonp?callback=?"
            else
                "#{iss_host}/engines/#{engine}/markets/#{market}/securities.jsonp?callback=?"
        data: (engine, market, params, options = {}) ->
            known_keys = ['nearest', 'leaders', 'sort_order', 'sort_column', 'first']

            params_name = options.params_name || 'securities'

            data =
                'iss.meta': 'off'
                'iss.only': 'securities,marketdata'

            data[params_name] = if _.isArray params then params.join(',') else params

            options = _.reduce options, (memo, value, key) ->
                memo[key] = value if _.include known_keys, key
                return memo
            , {}

            _.extend data, options
            
            data
        
        parse: (json) ->
            iss_prepare_records(iss_merge_columns_and_data(json?.securities), iss_merge_columns_and_data(json?.marketdata))

        key: (engine, market, params, options = {}) ->
            [engine, market, params, options.boardid]

    security:
        url: (engine, market, board, param) ->
            "#{iss_host}/engines/#{engine}/markets/#{market}/boards/#{board}/securities/#{param}.jsonp?callback=?"
        data: (engine, market, board, param, options = {}) ->
            'iss.meta': 'off'
            'iss.only': options.only || 'securities,marketdata'
        parse: (json) ->
            [_.first(iss_prepare_records(iss_merge_columns_and_data(json?.securities), iss_merge_columns_and_data(json?.marketdata))), json['iss.status']]
        key: (engine, market, board, param, options = {}) ->
            [engine, market, board, param, options.only]
    
    description:
        url: (param) ->
            "#{iss_host}/securities/#{param}.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
            'iss.only': 'description'
        parse: (json) ->
            iss_merge_columns_and_data(json?.description)
        key: (param) ->
            [param]
    
    orderbook:
        url: (engine, market, board, param) ->
            "#{iss_host}/engines/#{engine}/markets/#{market}/boards/#{board}/securities/#{param}/orderbook.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
            'iss.only': 'orderbook'
        parse: (json) ->
            [iss_merge_columns_and_data(json?.orderbook), json['iss.status']]
        key: (engine, market, board, param) ->
            [engine, market, board, param]
    
    boards:
        url: (param) ->
            "#{iss_host}/securities/#{param}.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
            'iss.only': 'boards'
        parse: (json) ->
            iss_merge_columns_and_data(json?.boards)
        key: (param) ->
            [param]
    
    turnovers:
        url: ->
            "#{iss_host}/turnovers.jsonp?callback=?"
        data: (options = {}) ->
            'iss.meta': 'off'
            'iss.only': 'turnovers'
            'is_tonight_session': if options.is_tonight_session == true then 1 else 0
        parse: (json) ->
            iss_merge_columns_and_data(json?.turnovers)
        key: (options = {}) ->
            [options]

    turnoverssectors:
        url: ->
            "#{iss_host}/turnovers.jsonp?callback=?"
        data: (options = {}) ->
            'iss.meta': 'off'
            'iss.only': 'turnoverssectors'
            'is_tonight_session': if options.is_tonight_session == true then 1 else 0
        parse: (json) ->
            iss_merge_columns_and_data(json?.turnoverssectors)
        key: (options = {}) ->
            [options]

    market_turnovers:
        url: (engine) ->
            "#{iss_host}/engines/#{engine}/turnovers.jsonp?callback=?"
        data: (engine, options) ->
            'iss.meta': 'off'
            'iss.only': 'turnovers,turnoversprevdate'
            'is_tonight_session': if options.is_tonight_session == true then 1 else 0
        parse: (json) ->
            turnovers:         iss_merge_columns_and_data(json?.turnovers)
            turnoversprevdate: iss_merge_columns_and_data(json?.turnoversprevdate)
        key: (engine, options) ->
            [engine, options]
    
    security_indices:
        url: (param) ->
            "#{iss_host}/securities/#{param}/indices.jsonp?callback=?"
        data: (param, options = {}) ->
            'iss.meta': 'off'
            'iss.only': 'indices'
            'only_actual': (if options.only_actual == true then '1' else '0')
        parse: (json) ->
            iss_merge_columns_and_data(json?.indices)
        key: (param, options) ->
            [param, options]

    index_securities:
        url: (engine, market, param) ->
            "#{iss_host}/statistics/engines/#{engine}/markets/#{market}/analytics/#{param}/indices.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
            'limit': 100
            'iss.only': 'analytics'
        parse: (json) ->
            iss_merge_columns_and_data(json?.analytics)
        key: (param) ->
            [param]
    
    capitalization:
        url: ->
            "#{iss_host}/statistics/engines/stock/capitalization.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            _.first(iss_merge_columns_and_data(json?.issuecapitalization))?['ISSUECAPITALIZATION']
        key: ->
            []
    
    currency_rates:
        url: ->
            "#{iss_host}/statistics/engines/currency/markets/selt/rates.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            _.first iss_merge_columns_and_data(json?.cbrf)
        key: ->
            []

    repo_dealers:
        url: ->
            "#{iss_host}/statistics/engines/state/markets/repo/dealers.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
            'iss.only': 'data'
        parse: (json) ->
            iss_merge_columns_and_data(json?.data)
        key: ->
            []

    cb_transactions:
        url: ->
            "#{iss_host}/statistics/engines/state/markets/repo/cboper.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
            'iss.only': 'date'
        parse: (json) ->
            iss_merge_columns_and_data(json?.date)
        key: ->
            []

    emitter_columns:
        url: (emitter_id) ->
            "#{iss_host}/emitters/#{emitter_id}/columns.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            iss_merge_columns_and_data(json?.emitter)
        key: ->
            []
    
    state_rates:
        url: ->
            "#{iss_host}/statistics/engines/state/rates.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            auctions: iss_merge_columns_and_data(json?.auctions)
            fixed: iss_merge_columns_and_data(json?.fixed)
        key: ->
            []

    state_rates_columns:
        url: ->
            "#{iss_host}/statistics/engines/state/rates/columns.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            iss_merge_columns_and_data(json?.columns)
        key: ->
            []
    
    repo_rates_securities:
        url: ->
            "#{iss_host}/securitygroups/stock_index/collections/stock_index_repo/securities.jsonp?sort_order=collection&callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            iss_merge_columns_and_data(json?.securities)
        key: ->
            []

    repo_rates_marketdata:
        url: ->
            "#{iss_host}/engines/stock/markets/index/boards/SNDX/securities.jsonp?callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            iss_prepare_records iss_merge_columns_and_data(json?.securities), iss_merge_columns_and_data(json?.marketdata)
        key: ->
            []

    repo_rates_history:
        url: ->
            "#{iss_host}/history/engines/stock/markets/index/securities.jsonp?date=last&include_repo_indices_values=1&callback=?"
        data: ->
            'iss.meta': 'off'
        parse: (json) ->
            iss_merge_columns_and_data(json?.history)
        key: ->
            []



request = (name, args...) ->
    meta    = request_meta[name]
    key     = mx.utils.sha1 JSON.stringify [name, meta.key(args...)]
    options = mx.utils.extract_options(args)
    
    if cache[key]?
        return cache[key].promise() if cache[key].state() == 'pending'
        return cache[key].promise() unless options.force == true
    
    cache[key] = new $.Deferred

    $.ajax
        url: meta.url(args...)
        data: _.extend(meta.data(args...), { lang: mx.locale() })
        dataType: 'jsonp'
        jsonpCallback: "iss_jsonp_#{key}"
    .done (json) ->
        cache[key].resolve meta.parse(json)
    
    cache[key].promise()


iss_merge_columns_and_data = (json) ->
    return [] unless json?.data and json?.columns
    _.map json.data, (record, index) ->
     _.reduce record, (memo, value, index) ->
         memo[json.columns[index]] = value
         memo
     , {}


iss_prepare_filters = (data) ->
    _.reduce data, (memo, record) ->
        (memo[record.filter_name] ||= []).push(record); memo
    , {}

iss_prepare_columns = (securities, marketdata) ->
    securities = _.reduce securities, ( (memo, record) -> memo[record.id] = record; memo ), {}
    marketdata = _.reduce marketdata, ( (memo, record) -> memo[record.id] = record; memo ), {}
    _.extend securities, marketdata

iss_prepare_records = (securities, marketdata) ->
    securities = _.reduce securities, ( (memo, record) -> memo[record.BOARDID + '/' + record.SECID] = record; memo ), {}
    marketdata = _.reduce marketdata, ( (memo, record) -> memo[record.BOARDID + '/' + record.SECID] = record; memo ), {}
    _.reduce _.keys(securities), (memo, key) ->
        memo.push _.extend(securities[key], marketdata[key]); memo
    , []



records = (engine, market, params, options = {}) ->
    deferred = $.Deferred();

    key     = mx.utils.sha1 JSON.stringify _.flatten(['records', _.toArray(arguments)])

    known_keys = ['nearest', 'leaders']

    params_name = options.params_name || 'securities'

    data =
        'iss.meta': 'off'
        'iss.only': 'securities,marketdata'

    data[params_name] = if _.isArray params then params.join(',') else params
    
    options = _.reduce options, (memo, value, key) ->
        memo[key] = value if _.include known_keys, key
        return memo
    , {}
    
    _.extend data, options
    
    $.ajax
        url: "#{iss_host}/engines/#{engine}/markets/#{market}/securities.jsonp?callback=?"
        data: data
        dataType: 'jsonp'
        cache: true
        jsonpCallback: "callback_#{key}"
        scriptCharset: 'utf-8'
    .then (json) ->
        deferred.resolve iss_prepare_records(iss_merge_columns_and_data(json?.securities), iss_merge_columns_and_data(json?.marketdata))
    
    deferred.promise()


emitter = (param) ->
    deferred = $.Deferred()
    
    key     = mx.utils.sha1 JSON.stringify _.flatten(['emitter', mx.locale(), arguments...])
    
    data =
        'iss.meta': 'off'
        'iss.only': 'emitter'
        'lang':     mx.locale()
    
    $.ajax
        url: "#{iss_host}/emitters/#{param}.jsonp?callback=?"
        data: data
        dataType: 'jsonp'
        jsonCallback: "callback_#{key}}"
        cache: true
        scriptCharset: 'utf-8'
    .then (json) ->
        deferred.resolve _.first(iss_merge_columns_and_data(json?.emitter))
    
    deferred.promise()


emitter_securities = (param) ->
    deferred = $.Deferred()
    
    key     = mx.utils.sha1 JSON.stringify _.flatten(['emitter_securities', mx.locale(), arguments...])

    data =
        'iss.meta': 'off'
        'iss.only': 'securities'
        'lang':     mx.locale()
    
    $.ajax
        url: "#{iss_host}/emitters/#{param}/securities.jsonp?callback=?"
        data: data
        dataType: 'jsonp'
        jsonCallback: "callback_#{key}}"
        cache: true
        scriptCharset: 'utf-8'
    .then (json) ->
        deferred.resolve iss_merge_columns_and_data(json?.securities)
    
    deferred.promise()

candle_borders = (engine, market, param) ->
    deferred = new $.Deferred
    
    key     = mx.utils.sha1 JSON.stringify _.flatten(['candle_borders', arguments...])

    data =
        'iss.meta': 'off'
        'iss.only': 'borders'
    
    $.ajax
        url: "#{iss_host}/engines/#{engine}/markets/#{market}/securities/#{param}/candleborders.jsonp?callback=?"
        data: data
        dataType: 'jsonp'
        jsonCallback: "callback_#{key}}"
        cache: true
        scriptCharset: 'utf-8'
    .then (json) ->
        deferred.resolve iss_merge_columns_and_data(json?.borders)

    deferred.promise()


_.extend scope,
    defaults:               (args...) -> request('defaults', args...)
    columns:                (args...) -> request('columns', args...)
    records:                (args...) -> request('securities', args...)
    security:               (args...) -> request('security', args...)
    security_indices:       (args...) -> request('security_indices', args...)
    index_securities:       (args...) -> request('index_securities', args...)
    orderbook:              (args...) -> request('orderbook', args...)
    description:            (args...) -> request('description', args...)
    boards:                 (args...) -> request('boards', args...)
    emitter:                emitter
    emitter_securities:     emitter_securities
    emitter_columns:        (args...) -> request('emitter_columns', args...)
    turnovers:              (args...) -> request('turnovers', args...)
    turnoverssectors:       (args...) -> request('turnoverssectors', args...)
    market_turnovers:       (args...) -> request('market_turnovers', args...)
    candle_borders:         candle_borders
    filters:                (args...) -> request('filters', args...)
    capitalization:         (args...) -> request('capitalization',  args...)
    currency_rates:         (args...) -> request('currency_rates',  args...)
    repo_dealers:           (args...) -> request('repo_dealers',    args...)
    cb_transactions:        (args...) -> request('cb_transactions', args...)
    state_rates:            (args...) -> request('state_rates', args...)
    state_rates_columns:    (args...) -> request('state_rates_columns', args...)
    repo_rates_securities:  (args...) -> request('repo_rates_securities', args...)
    repo_rates_marketdata:  (args...) -> request('repo_rates_marketdata', args...)
    repo_rates_history:     (args...) -> request('repo_rates_history', args...)
